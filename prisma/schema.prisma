// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model User {
  id            String    @id @default(cuid())
  firstname     String?
  lastname      String?
  username      String?   @unique
  password      String?   @db.Text
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  lastLogin     DateTime?
  image         String?
  accounts      Account[]
  profile       Profile?
  role          UserRole @default(USER)
  
  @@map("users")
}

model Profile{
  id            String @id @default(cuid())
  phone         String
  address       String
  user          User   @relation(fields: [userId], references: [id])
  userId        String @unique
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}
 
model VerificationToken {
  id         String @id @default(cuid())
  email      String   @unique
  token      String   @unique
  expires    DateTime
 
  @@unique([email, token])
  @@map("verificationtokens")
}

model ResetPasswordToken {
  id         String @id @default(cuid())
  email      String   @unique
  token      String   @unique
  expires    DateTime
 
  @@unique([email, token])
  @@map("passwordresettokens")
}

model Sneaker{
  id          String @id @default(cuid())
  marque      String 
  model       String
  description String
  
  price       Float
  promoPrice  Float
  isPromo     Boolean

  stock Int
  colorPrimary String
  colorPrimaryName String

  colorSecondaries ColorSecondary[]
  sizes Size[]

  categoryId  String
  category Category @relation(fields: [categoryId], references: [id])
  themes Theme[]
  tags Tag[]

  images Image[]
  createdAt DateTime
  updatedAt DateTime @updatedAt
}

model Size{
  id String @id @default(cuid())
  size Int
  quantity Int
  sneakerId String
  sneaker Sneaker @relation(fields:[sneakerId], references: [id])
}
model ColorSecondary{
  id String @id @default(cuid())
  name String
  color String
  sneakerId String
  sneaker Sneaker @relation(fields:[sneakerId], references: [id])
}

model Image{
  id String @id @default(cuid())
  publicId String
  secureUrl String
  sneakerId String 
  sneaker Sneaker @relation(fields: [sneakerId], references: [id])
}

model Category{
  id String @id @default(cuid())
  name String
  description String

  designer String
  popularity Int @default(0)
  sneaker Sneaker[]

  createdAt DateTime
  updatedAt DateTime @updatedAt
}
model Tag{
  id String @id @default(cuid())
  name String
  description String

  popularity Int @default(0)
  sneakers Sneaker[]
  
  createdAt DateTime
  updatedAt DateTime @updatedAt
}
model Theme{
  id String @id @default(cuid())
  name String
  description String

  publicId String
  secureUrl String

  popularity Int @default(0)
  sneakers Sneaker[]

  createdAt DateTime
  updatedAt DateTime @updatedAt
}